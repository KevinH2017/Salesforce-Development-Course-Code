A transaction represents a set of operations that are executed as a single unit.
All DML operations in a transaction must be complete successfully for the transaction to be committed.
If an error occurs in one operation, the entire transaction is rolled back and no data is committed to the database.
The boundary of a transaction can be a trigger, a class method, an anonymous block of code, a Visualforce page, or a custom Web service method.

A transaction is useful when several operations are related and either all or none of the operations are committed.
Its goal is to keep the database in a consistent state, like a bank transaction where money is only deducted if the transfer is successful.

In a bank transaction, all changes are committed to the database only AFTER ALL operations are successful.
If an error occurs in any of the steps, all database changes are rolled back and the transaction isn't committed.