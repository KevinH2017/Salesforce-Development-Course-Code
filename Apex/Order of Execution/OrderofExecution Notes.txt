Order of Execution Overview

Whenever a record is saved with insert, update, or upsert statement. 
Salesforce performs a chain of events, before being executing these events on the server,
the browser runs JavaScript validation to see if the record contains any dependent picklist fields.
The validation limits each dependent picklist field to its available values.
No other validation occurs on the client side.

START:

1. Load the original record
    - Loads the original record from the database or initializes the record for an upsert statement

2. Loads the new record fields from the request and overwrites the old values
    - Salesforce peforms different validation checks depending on the type of request
        - For requests from a standard UI edit page, Salesforce runs these system validation checks on the record:
            - Compliance with layout-specific rules
            - Required values at the layout level and field-definition level
            - Valid field formats
            - Maximum field length

        - If the request is from a User object on a standard UI edit page, Salesforce runs custom validation rules:
            - For requests from multiline item creation such as quote line items and opportunity line items, Salesforce runs custom validation rules
            - For requests from other sources such as an Apex application or a SOAP API call, Salesforce validates foreign keys, field formats,
            maximum field lengths, and restricted picklists. Before executing a trigger, Salesforce verifies that any custom foreign keys don't
            refer to the object itself

3. Executes record-triggered flows that are configured to run before the record is saved

4. Executes all 'before' triggers

5. Runs most system validation steps again, such as verifying that all required fields have a 'non-null' value, and runs any custom validation rules.
    The only system validation that Salesforce doesn't run a second time (when the request comes from a standard UI edit page) is the enforcement of
    layout-specific rules

6. Executes duplicate rules. If the duplicate rule identifies the record as a duplicate and uses the block actiom, the record isn't saved and no
    further steps, such as 'after' triggers and workflow rules, are taken

7. Saves the record to the database, but doesn't commit yet

8. Executes all 'after' triggers
    - If this is not a recursive save, skip steps 9 - 17

9. Executes assignment rules

10. Executes auto-response rules

11. Executes workflow rules. If there are workflow field updates:
    - This sequence only applies to workflow rules:
        - Updates the record again
        - Runs system validations again. Custom validation rules, flows, duplicate rules, processes build with
            Process Builder, and escalation rules aren't run again
        - Executes 'before update' triggers and 'after update' triggers, regardless of the record operation
            (insert or update), one more time (and ONLY ONE more time)

12. Executes escalation rules

13. Executes these Salesforce Flow automations, but not in a guaranteed order:
    - Processes built with Process Builder
    - Flows launched by workflow rules (flow trigger workflow actions pilot)
    - To control the order of execution of Salesforce Flow automations, use record-triggered flows
        - When a process or flow executes a DML operation, the affected record goes through the save procedure

14. Executes record-triggered flows that are configured to run after the record is saved

15. Executes entitlement rules

16. If the record contains a roll-up summary field or is part of a cross-object workflow, performs calcuations and updates
    the roll-up summary field in the parent record. Parent record goes through save procedure

17. If the parent record is updated, and a grandparent record contains a roll-up summary field or is part of a cross-object
    workflow, performs calcuations and updates the roll-up summary field in the grandparent record. Grandparent record goes
    through save procedure

18. Executes Criteria Based Sharing evalution

19. Commits all DML operations to the database

20. After the changes are committed to the database, executes post-commit logic. Examples of post-commit include:
    - Sending an email
    - Enqueued asynchronous Apex jobs, including queueable jobs and future methods
    - Asynchronous paths in record-triggered flows

END